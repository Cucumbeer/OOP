#include"String.h"

//#define CONSTRUCTORS_CHECK

void main()
{
	setlocale(LC_ALL, "Russian");

#ifdef CONSTRUCTORS_CHECK
	//String str = 5;		//Conversion from int to String
	String str(5);			//explicit consrtuctor можно вызвать только так,
							//и нельз€ вызвать оператором =
	str.print();
	String str1 = "Hello";
	str1 = str1;
	str1.print();

	String str2 = str1;
	str2.print();

	String str3;
	str3 = str2;
	str3.print();
#endif // CONSTRUCTORS_CHECK

	String str1 = "Hello";
	cout << str1 << endl;
	String str2 = "World";
	cout << str2 << endl;

	/*String str3 = str1 + " " + str2;
	cout << str3 << endl;*/
 	cout << str1 + str2 << endl;
	str1 += str2;
	cout << str1 << endl;
}


/*
	Ќаследование(Inheritance) - Ёто способность классов наследовать свойства других классов. 
	ѕод свойствами в данном случае понимаютс€ переменные и методы. 
	Ќаследование позвол€ет одному классу использовать код другого класса, что приводит к повторному использованию кода и следовательно сокращает объем исходного кода.
	ѕри наследовании различают базовый класс(–одительский класс) и производный класс(ƒочерний)
	Ѕазовый класс не знает сколько и каких классов от него унаследовано. ј дочерний класс знает только своего родител€.
	Ќаследование позвол€ет обобщить свойства разных классов и вынести их в отдельный класс. Ёто в значительной степени сокращает объем кода 
	ќбобщение еще называют Generalisation.
	ƒочерние классы дополн€ют свойства базового класса своими собственными свойствами. 
	Ќаследование отображает отношени€ между классами типа: "явл€етс€".
	» поэтому прежде, чем что-то от чего-то наследовать нужно убедитьс€ в том, что что-то €вл€етс€ чем-то.
	Ќапример: кот €вл€етс€ животным.
	»нициализаци€ в заголовке возможна только в конструкторах.
*/