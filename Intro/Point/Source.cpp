#include <iostream>
using namespace std;

#define tab "\t"
//  #define STRUCT_POINT

class Point
{
	double x;
	double y;

public:
	double get_x()const
	{
		return x;
	}
	double get_y()const
	{
		return y;
	}
	void set_x(double x)
	{
		this->x = x;
	}
	void set_y(double y)
	{
		this->y = y;
	}
	
};

void main()
{
	setlocale(LC_ALL, "");
#ifdef STRUCT_POINT


	Point A;   // Создание объекта 
	A.x = 2;
	A.y = 3;
	cout << A.x << tab << A.y << endl;

	Point* pA = &A;  //Объявляем указатель на Point и берем адрес точки А
	cout << pA->x << tab << pA->y << endl; 
#endif // STRUCT_POINT

	Point A;
	A.set_x(3);
	A.set_y(2);
	cout << A.get_x() << tab << A.get_y() << endl;

}

/*  Структура и класс - это тип данных
    Объект являются переменными пользовательского типа. 
	Объект класса или структуры еще называют экземпляром класса или структуры
	Для обращения к полям объектов можно использовать . либо ->
	. - Оператор прямого доступа (Point operator). Используется для доступа к полям объекта по имени объекта.
	-> - Оператор косвенного доступа (Arrow operator). Используется к полям объекта по адресу объекта. 
	get - методы должны быть константными.
	Константным называется метод, который не изменяет объект для которого вызывается. 
	this - это указатель на объект, для которого вызывается метод. 
	Внутри метода невозможно узнать имя объекта, для которого метод вызвался, но всегда можно узнать адрес объекта при помощи this.
	В любом классе обязательно должны быть: конструктор, деструктор и оператор присвоить. 
	Constructor - это метод, который создает объект
	Destructor - это метод, который уничтожает объект по завершении его времени жизни. 
	Время жизни объекта истекает при завершении области видимости, в которой он объявлен. Это относится к локальным объектам.

	for (int i = 0; i < 5; i++)  // Здесь счетчик i является локальным объектом для цикла for
								 //Он сущетвует только в зоне видимости цикла, и по завершении всех итераций этот объект будет уничтожен.
	{
		cout << i << tab;
	}
	cout << endl;
	Point A создан в области видимости функции main и будет уничтожен по завершении функции main. 
	Конструктор и деструктор называется так же как и класс, но перед деструктором ставится '~'
	Конструктор может принимать параметры, поэтому его как и любую другую функцию можно перегрузить, а значит в классе может быть сколько угодно конструкторов. 
	Деструктор не может принимать параметры и его нельзя перегрузить, поэтому в классе может быть только один деструктор. 

	Написать метод distance, который возвращает расстояние до указанной точки. 
	Написать функцию distance, которая возвращает расстояние между двумя точками. 
 */